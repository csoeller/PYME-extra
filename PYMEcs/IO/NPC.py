from PYME.warnings import warn
import pickle
from pathlib import Path

def load_NPC_set(fname, ts=None, foreshortening=None, version=None):
    with open(fname,'rb') as fi:
        npcs=pickle.load(fi)
    fpath = Path(fname)
    if ts is not None and ts not in fpath.stem:
        warn("MINFLUX time stamp not in NPC dataset filename; check correct filename chosen: %s vs %s" %
             (ts,fpath.stem))

    if foreshortening is not None:
        try:
            npc_foreshortening = npcs.foreshortening
        except AttributeError:
            npc_foreshortening = 1.0

        if abs(npc_foreshortening-foreshortening) >= 0.01:
            warn("NPC foreshortening is %.2f while dataset foreshortening is %.2f, check this is compatible" %
                 (npc_foreshortening,foreshortening))
        

    if version is not None:
        pass # here add version checking logic

    return npcs

def save_NPC_set(npcs,fname):
    with open(fname, "wb") as file:
            pickle.dump(npcs,file)

def findNPCset(pipeline,return_mod=False):
    from PYMEcs.recipes.localisations import NPCAnalysisInput
    # note a "manually" created or loaded NPCset in pipeline.npcs attribute takes precedence over loaded via NPCAnalysisInput module
    if pipeline is not None and 'npcs' in dir(pipeline) and pipeline.npcs is not None and not return_mod:
        return pipeline.npcs
    if pipeline is None:
        return None
    dsname = None
    # search/check for instance
    for mod in pipeline.recipe.modules:
        if isinstance(mod,NPCAnalysisInput):
            dsname = mod.output
            module = mod
            break
    if dsname is None:
        if warnings:
            warn("we rely on npc analysis being present in a datasource generated by the NPCAnalysisInput module. Can't find such a datasource, aborting...")
        return None
    if return_mod:
        return module
    npc_set_container = pipeline.dataSources[dsname].mdh.get('Processing.NPCAnalysisInput.npcs')
    if npc_set_container is None:
        if warnings:
            warn("found no NPCset container in metadata of datasource 'dsname' generated by NPCAnalysisInput module, aborting..." % dsname)
        return None
    return npc_set_container.get_npcset()
